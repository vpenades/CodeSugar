<#+

public class ColorConversionStructuresCodeGen
{
    public ColorConversionStructuresCodeGen(Action<string> lw, string srcColorType, int vectorSize)
	{
        _LineWriter = lw;
		SrcColorType = srcColorType;		
        VectorSize = vectorSize;
	}

    private readonly Action<string> _LineWriter;

	public string SrcColorType {get;}	
    public int VectorSize {get;}	

    

    public string SrcColorTypeName => $"__{SrcColorType}x{VectorSize}";
    public string VectorTypeName => $"VECTOR{VectorSize}";

    public void WriteLine(string text) { _LineWriter(text); }
    
    public void WriteStructBegin()
    {        
        WriteLine("");

        WriteLine("[System.Runtime.InteropServices.StructLayout(LayoutKind.Sequential, Pack = 1)]");
        WriteLine($"readonly struct {SrcColorTypeName}<T> where T: unmanaged, IConvertible");
        WriteLine("{");

        WriteLine("#region data");

        WriteLine($"public const int TotalElements = {VectorSize} * {SrcColorType.Length};");    
        
        foreach(var element in GetElements(SrcColorType, VectorSize))
        {
            WriteLine($"public readonly T {element};");        
        }        

        WriteLine("#endregion");
        WriteLine("");

        WriteLine("#region API");
    }

    public Dictionary<string,(int size, int repeats)> AvailableConverters = new Dictionary<string,(int size, int repeats)>();

    public void WriteConverter(string srcElementType, string dstColorType, int repeats)    
    {
        // elements of the current structure, arranged in RGBA order
        var srcXXX = SrcColorType.Length == 3 ? "RGB" : "RGBA";
        var srcElements = GetElements(srcXXX, VectorSize);

        // conversion indices
        var dstIndices = ColorConversionStaticFuncCodeGen.GetElementIndices(srcXXX, dstColorType, VectorSize);    

        // alpha channel default value
        var defaultAlpha = srcElementType == "byte" ? "(int)255" : "1";
        var dstPrefix = srcElementType == "byte" ? "(int)" : "";
        var dstElements = dstIndices.Select(idx => idx >= 0 ? dstPrefix + "src." + srcElements[idx] : defaultAlpha);

        
        var suffix = srcElementType == "byte" ? ".ConvertToSingle();" : ";";
        

        // try to accomodate dstElements to the available SIMD vectors

        foreach(var singleCount in new[] {2, 4, 8, 16})
        {
            bool canConvert = true;

            if ( (dstIndices.Count % singleCount) != 0) canConvert = false;
            var len = dstIndices.Count / singleCount;
            if (len != repeats) canConvert = false;

            if (singleCount < 8) canConvert = false; // discard conversions to output vectors lower than 8

            if (!canConvert)
            {
                // WriteLine($"// Convert {SrcColorType} {srcElements.Count} > {dstColorType} {dstIndices.Count / repeats}");
                continue;
            }

            AvailableConverters[dstColorType] = (singleCount, repeats);

            var vectorType = $"VECTOR{singleCount}";

            WriteLine("");

            if (singleCount > 8) WriteLine("#if NET8_0_OR_GREATER");
            else WriteLine("#if NET6_0_OR_GREATER");

            WriteLine("[MethodImpl(AGRESSIVE)]");

            if (repeats == 1) WriteLine($"private static void _ConvertTo{dstColorType}(in {SrcColorTypeName}<{srcElementType}> src, out {vectorType} dst)");
            else WriteLine($"private static void _ConvertTo{dstColorType}(in {SrcColorTypeName}<{srcElementType}> src, out {vectorType} dstX, out {vectorType} dstY, out {vectorType} dstZ)");
            WriteLine("{");            
            
            if (repeats == 1)
            {
                var args = string.Join(", ", dstElements);
                WriteLine($"dst = {vectorType}FACTORY.Create({args}){suffix}");
            }
            
            if (repeats == 3)
            {
                var argsX = string.Join(", ", dstElements.Skip(singleCount * 0).Take(singleCount));
                var argsY = string.Join(", ", dstElements.Skip(singleCount * 1).Take(singleCount));
                var argsZ = string.Join(", ", dstElements.Skip(singleCount * 2).Take(singleCount));                

                WriteLine($"dstX = {vectorType}FACTORY.Create({argsX}){suffix}");
                WriteLine($"dstY = {vectorType}FACTORY.Create({argsY}){suffix}");
                WriteLine($"dstZ = {vectorType}FACTORY.Create({argsZ}){suffix}");
            }

            WriteLine("}");

            WriteLine("#endif");
        }        
    }    

    public void WriteMethod(string dstColorType, int currVectorSize, int repeat, bool useMAD)
    {
        WriteLine("");

        if (useMAD || currVectorSize > 8) WriteLine("#if NET8_0_OR_GREATER");
        else WriteLine("#if NET6_0_OR_GREATER");        

        var madParams = string.Empty;
        if (useMAD)
        {
            if (repeat == 3) madParams = ", in XYZ mul, in XYZ add";
            else madParams = ", in XYZW mul, in XYZW add";        
        }

        var vectorTypeName = $"VECTOR{currVectorSize}";

        WriteLine("[MethodImpl(AGRESSIVE)]");
        WriteLine($"public static void CopyTo{dstColorType}(ReadOnlySpan<{SrcColorTypeName}<T>> src, Span<{vectorTypeName}> dst {madParams})");
        WriteLine("{");

        

        WriteLine("");

        if (repeat == 1)
        {
            if (useMAD)
            {            
                WriteLine($"var mul1 = mul.RepeatVector{currVectorSize*32}();");
                WriteLine($"var add1 = add.RepeatVector{currVectorSize*32}();");
                WriteLine("");
            }

            _WriteSection1X("Byte", dstColorType,useMAD);
            _WriteSection1X("float", dstColorType,useMAD);
        }    

        if (repeat == 3)
        {
            if (useMAD)
            {            
                WriteLine($"var mul3 = __Vector3x{currVectorSize*32}.Repeat(mul);");
                WriteLine($"var add3 = __Vector3x{currVectorSize*32}.Repeat(add);");
                WriteLine("");
            }

            _WriteSection3X("Byte", dstColorType,useMAD);
            _WriteSection3X("float", dstColorType,useMAD); 
        }               

        WriteLine("throw new NotImplementedException();");            

        WriteLine("}");

        WriteLine($"#endif");
    }

    private void _WriteSection1X(string srcElementType, string dstColorFmt, bool useMAD)
    {
        WriteLine($"if (typeof({srcElementType}) == typeof(T))");
        WriteLine("{");

        WriteLine($"var srcTyped = MMARSHALL.Cast<{SrcColorTypeName}<T>,{SrcColorTypeName}<{srcElementType}>>(src);");        

        WriteLine("for (int i = 0; i < srcTyped.Length; i++)");            
        WriteLine("{");

        WriteLine("ref readonly var item = ref srcTyped[i];");        

        WriteLine($"_ConvertTo{dstColorFmt}(item, out dst[0]);");

        if (useMAD)
        {
            WriteLine($"dst[0] = dst[0] * mul1 + add1;");            
        }        
        
        WriteLine("dst = dst.Slice(1);");
        
        WriteLine("}");
        WriteLine("return;");
        WriteLine("}");
    }


    private void _WriteSection3X(string srcElementType, string dstColorFmt, bool useMAD)
    {
        WriteLine($"if (typeof({srcElementType}) == typeof(T))");
        WriteLine("{");

        WriteLine($"var srcTyped = MMARSHALL.Cast<{SrcColorTypeName}<T>,{SrcColorTypeName}<{srcElementType}>>(src);");                            

        WriteLine("for (int i = 0; i < srcTyped.Length; i++)");            
        WriteLine("{");

        WriteLine("ref readonly var item = ref srcTyped[i];");        

        WriteLine($"_ConvertTo{dstColorFmt}(item, out dst[0], out dst[1], out dst[2]);");

        if (useMAD)
        {
            WriteLine($"dst[0] = dst[0] * mul3.X + add3.X;");
            WriteLine($"dst[1] = dst[1] * mul3.Y + add3.Y;");
            WriteLine($"dst[2] = dst[2] * mul3.Z + add3.Z;");        
        }        
        
        WriteLine("dst = dst.Slice(3);");
        
        WriteLine("}");
        WriteLine("return;");
        WriteLine("}");
    }


    public void WriteStructEnd()
    {
        WriteLine("#endregion");
        WriteLine("}");
    }


    // gets the elements of a x3 structure, ordered in the given format.
    public static IReadOnlyList<string> GetElements(string format, int simdLevel, string prefix = null, bool insertDefaultAlpha = false)
    {
        var elements = new List<string>();

        prefix ??= string.Empty;

        for(int i=0; i < simdLevel; ++i)
        {
            switch(format)
            {
                case "RGB":
                    elements.Add(prefix + $"_Element{i}_R");
                    elements.Add(prefix + $"_Element{i}_G");
                    elements.Add(prefix + $"_Element{i}_B");                    
                    break;

                case "BGR":
                    elements.Add(prefix + $"_Element{i}_B");
                    elements.Add(prefix + $"_Element{i}_G");
                    elements.Add(prefix + $"_Element{i}_R");                    
                    break;

                case "RGBA":
                    elements.Add(prefix + $"_Element{i}_R");
                    elements.Add(prefix + $"_Element{i}_G");
                    elements.Add(prefix + $"_Element{i}_B");
                    if (insertDefaultAlpha) elements.Add("defaultAlpha");
                    else elements.Add(prefix + $"_Element{i}_A");
                    break;

                case "BGRA":
                    elements.Add(prefix + $"_Element{i}_B");
                    elements.Add(prefix + $"_Element{i}_G");
                    elements.Add(prefix + $"_Element{i}_R");
                    if (insertDefaultAlpha) elements.Add("defaultAlpha");
                    else elements.Add(prefix + $"_Element{i}_A");
                    break;

                case "ARGB":
                    if (insertDefaultAlpha) elements.Add("defaultAlpha");
                    else elements.Add(prefix + $"_Element{i}_A");
                    elements.Add(prefix + $"_Element{i}_R");
                    elements.Add(prefix + $"_Element{i}_G");
                    elements.Add(prefix + $"_Element{i}_B");                    
                    break;
            }

        }

        return elements;
    }
}

public class ColorConversionStaticFuncCodeGen
{
	public ColorConversionStaticFuncCodeGen(Action<string> lw, string srcColorType, string dstColorType, Dictionary<(string src, string dst, int vsize),int> helper)
	{
        _LineWriter = lw;
		SrcColorType = srcColorType;
		DstColorType = dstColorType;

        _SimdVectorHelper = helper;
	}

    private readonly Action<string> _LineWriter;

    private readonly Dictionary<(string src, string dst, int vsize),int> _SimdVectorHelper;

	public string SrcColorType {get;}
	public string DstColorType {get;}

	public bool DstIs3Elements => DstColorType == "RGB" || DstColorType == "BGR";

    public void WriteLine(string text) { _LineWriter(text); }

    public void WriteLines(IEnumerable<string> lines)
    {
        foreach(var l in lines) WriteLine(l);
    }

    public void WriteStaticMethod(string srcElementType, bool useMAD)
    {
        WriteLines(EmitStaticMethod(srcElementType,useMAD));
    }


	public IEnumerable<string> EmitStaticMethod(string srcElementType, bool useMAD)
	{
		var madParams = string.Empty;
        if (useMAD)
        {
            if (DstIs3Elements) madParams = ", in XYZ mul, in XYZ add";
            else madParams = ", in XYZW mul, in XYZW add";        
        }

        var dstValueName = DstColorType.Length == 3 ? "XYZ" : "XYZW";

        yield return "";
        yield return "/// <remarks>Copies <paramref name=\"src\"/> into <paramref name=\"dst\"/>, applying the appropiate color conversion.</remarks>";
		yield return $"public static void Convert{SrcColorType}to{DstColorType}(this ReadOnlySpan<{srcElementType}> src, Span<{dstValueName}> dst{madParams})";
		yield return "{";

        yield return $"if (src.Length % {SrcColorType.Length} != 0) throw new ArgumentException(\"length is not multiple of {SrcColorType.Length}\", nameof(src));";
        yield return $"if (src.Length > dst.Length * {SrcColorType.Length}) throw new ArgumentOutOfRangeException(nameof(src));";        
        yield return "";

        yield return "#if NET8_0_OR_GREATER";

        yield return "if (false) {}"; // hack to handle if-else properly
        foreach(var l in EmitSimdMethodBlock(16, srcElementType, useMAD)) yield return l;
        yield return "";
		foreach(var l in EmitSimdMethodBlock(8, srcElementType, useMAD)) yield return l;
        yield return "";
		foreach(var l in EmitSimdMethodBlock(4, srcElementType, useMAD)) yield return l;

        yield return "#endif";	

		

        yield return "// fallback";
        yield return "{";		

        yield return $"while(src.Length >= {SrcColorType.Length})";
        yield return "{";
            foreach(var l in WriteFallbackConverter("src","dst", SrcColorType, DstColorType, srcElementType == "float" ? 1 : 255, useMAD)) yield return l;
        
            yield return $"src = src.Slice({SrcColorType.Length});";
            yield return $"dst = dst.Slice(1);";
        yield return "}";

        yield return "}";

		yield return "}";
	}

    private IEnumerable<string> EmitSimdMethodBlock(int vecSize, string srcElementType, bool useMAD)
	{
        if (!_SimdVectorHelper.TryGetValue((SrcColorType,DstColorType, vecSize), out var structSize)) yield break;

        var dstValueName = DstColorType.Length == 3 ? "XYZ" : "XYZW";        

		yield return $"else if (Vector{32*vecSize}.IsHardwareAccelerated)";
        yield return "{";        

		var currentType = $"__{SrcColorType}x{structSize}<{srcElementType}>";
		
        yield return $"var srcX = MMARSHALL.Cast<{srcElementType},{currentType}>(src);";
		yield return $"var dstX = MMARSHALL.Cast<{dstValueName},VECTOR{vecSize}>(dst);"; // ".Slice(srcX.Length*{SrcColorType.Length});";

        if (useMAD) yield return $"{currentType}.CopyTo{DstColorType}(srcX, dstX, mul, add);";
        else yield return $"{currentType}.CopyTo{DstColorType}(srcX, dstX);";

        yield return $"var len = srcX.Length * {structSize};";        
        yield return $"src = src.Slice(len * {SrcColorType.Length});";
        yield return $"dst = dst.Slice(len);";

        yield return "}";                
	}	

	// this is used as fallaback to copy color elements one by one
    private static IEnumerable<string> WriteFallbackConverter(string srcArray, string dstArray, string srcColorFmt, string dstColorFmt, int alpha, bool useMAD)    
    {
        var vecTerms = new string[] {"X","Y","Z","W"};

        yield return $"ref var curr = ref {dstArray}[0];";

        var srcIndices = GetForwardOrder(srcColorFmt);
        var dstIndices = GetReverseOrder(dstColorFmt);
        
        for(int i=0; i < dstIndices.Count; ++i)
        {
            var si = dstIndices[i];
            var di = si < srcIndices.Count ? srcIndices[si] : -1;

            var vecTerm = vecTerms[i];

            if (di>= 0) yield return $"curr.{vecTerm} = (float){srcArray}[{di}];";
            else yield return $"curr.{vecTerm} = {alpha};";
        }

        if (useMAD)
        {
            yield return $"curr *= mul;";
            yield return $"curr += add;";
        }
    }

	

    public static IReadOnlyList<int> GetElementIndices(string srcFmt, string dstFmt, int repeat)
    {
        var srcIndices = GetForwardOrder(srcFmt);
        var dstIndices = GetReverseOrder(dstFmt);

        if (dstIndices.Count == 3)
        {
            var x = dstIndices[0];
            var y = dstIndices[1];
            var z = dstIndices[2];            

            x = x >= 0 && x < srcIndices.Count ? srcIndices[x] : -1;
            y = y >= 0 && y < srcIndices.Count ? srcIndices[y] : -1;
            z = z >= 0 && z < srcIndices.Count ? srcIndices[z] : -1;            

            var indices = new int[3*repeat];
            var ii = 0;

            for(int i=0; i < indices.Length; i+=3)
            {
                indices[i+0] = x >= 0 ? x + ii : -1;
                indices[i+1] = y >= 0 ? y + ii : -1;
                indices[i+2] = z >= 0 ? z + ii : -1;                
                ii+= srcIndices.Count;
            }    

            return indices;
        }

        if (dstIndices.Count == 4)
        {
            var x = dstIndices[0];
            var y = dstIndices[1];
            var z = dstIndices[2];
            var w = dstIndices[3];            

            x = x >= 0 && x < srcIndices.Count ? srcIndices[x] : -1;
            y = y >= 0 && y < srcIndices.Count ? srcIndices[y] : -1;
            z = z >= 0 && z < srcIndices.Count ? srcIndices[z] : -1;
            w = w >= 0 && w < srcIndices.Count ? srcIndices[w] : -1;

            var indices = new int[4*repeat];
            var ii = 0;

            for(int i=0; i < indices.Length; i+=4)
            {
                indices[i+0] = x >= 0 ? x + ii : -1;
                indices[i+1] = y >= 0 ? y + ii : -1;
                indices[i+2] = z >= 0 ? z + ii : -1;
                indices[i+3] = w >= 0 ? w + ii : -1;
                ii+= srcIndices.Count;
            }    

            return indices;
        }

        throw new NotImplementedException();
    }

    
    private static IReadOnlyList<int> GetForwardOrder(string format) // at which index is R located?
    {
        switch(format)
        {
            case "RGB": return new int[] {0,1,2};
            case "BGR": return new int[] {2,1,0};
            case "RGBA": return new int[] {0,1,2,3};
            case "BGRA": return new int[] {2,1,0,3};
            case "ARGB": return new int[] {1,2,3,0};
            default: return new int[] {};
        }
    }

    private static IReadOnlyList<int> GetReverseOrder(string format) // what's in that index?
    {
        switch(format)
        {
            case "RGB": return new int[] {0,1,2};
            case "BGR": return new int[] {2,1,0};
            case "RGBA": return new int[] {0,1,2,3};
            case "BGRA": return new int[] {2,1,0,3};
            case "ARGB": return new int[] {3,0,1,2};
            default: return new int[] {};
        }
    }
}




#>

