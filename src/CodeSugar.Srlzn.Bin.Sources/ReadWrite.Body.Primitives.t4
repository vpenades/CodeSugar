        
        #region primitives

        public static WRITEABLEBLOCK WriteBool(this WRITEABLEBLOCK source, bool value) { return WriteU8(source, value ? (Byte)255 : (Byte)0); }
        public static READABLEBLOCK ReadBool(this READABLEBLOCK source, out bool value)
        {
            source = ReadU8(source, out var bval);
            value = bval != 0;
            return source;
        }

        public static WRITEABLEBLOCK WriteU8(this WRITEABLEBLOCK source, Byte value) { return WritePlatform<Byte>(source, value); }
        public static READABLEBLOCK ReadU8(this READABLEBLOCK source, out Byte value) { return ReadPlatform<Byte>(source, out value); }

        public static WRITEABLEBLOCK WriteS8(this WRITEABLEBLOCK source, SByte value) { return WritePlatform<Byte>(source, (Byte)value); }
        public static READABLEBLOCK ReadS8(this READABLEBLOCK source, out SByte value) { source = ReadPlatform<Byte>(source, out var uvalue); value = (SByte)uvalue; return source; }
        
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeS16(this WRITEABLEBLOCK target, Int16 value) => WriteEndian(target, value, false);
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeU16(this WRITEABLEBLOCK target, UInt16 value) => WriteEndian(target, value, false);

        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeS32(this WRITEABLEBLOCK target, Int32 value) => WriteEndian(target, value, false);
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeU32(this WRITEABLEBLOCK target, UInt32 value) => WriteEndian(target, value, false);

        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeS64(this WRITEABLEBLOCK target, Int64 value) => WriteEndian(target, value, false);
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeU64(this WRITEABLEBLOCK target, UInt64 value) => WriteEndian(target, value, false);

        #if NET5_0_OR_GREATER
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeF16(this WRITEABLEBLOCK target, Half value) => WriteEndian(target, value, false);
        #endif
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeF32(this WRITEABLEBLOCK target, Single value) => WriteEndian(target, value, false);
        /// <summary>Writes little endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteLeF64(this WRITEABLEBLOCK target, Double value) => WriteEndian(target, value, false);


        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeS16(this WRITEABLEBLOCK target, Int16 value) => WriteEndian(target, value, true);
        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeU16(this WRITEABLEBLOCK target, UInt16 value) => WriteEndian(target, value, true);

        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeS32(this WRITEABLEBLOCK target, Int32 value) => WriteEndian(target, value, true);
        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeU32(this WRITEABLEBLOCK target, UInt32 value) => WriteEndian(target, value, true);

        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeS64(this WRITEABLEBLOCK target, Int64 value) => WriteEndian(target, value, true);
        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeU64(this WRITEABLEBLOCK target, UInt64 value) => WriteEndian(target, value, true);

        #if NET5_0_OR_GREATER
        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeF16(this WRITEABLEBLOCK target, Half value) => WriteEndian(target, value, true);
        #endif
        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeF32(this WRITEABLEBLOCK target, Single value) => WriteEndian(target, value, true);
        /// <summary>Writes BIG endian value</summary>
        /// <returns>Next write context</returns>
        public static WRITEABLEBLOCK WriteBeF64(this WRITEABLEBLOCK target, Double value) => WriteEndian(target, value, true);


        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeS16(this READABLEBLOCK source, out Int16 value) => ReadEndian(source, out value, false);
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeU16(this READABLEBLOCK source, out UInt16 value) => ReadEndian(source, out value, false);

        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeS32(this READABLEBLOCK source, out Int32 value) => ReadEndian(source, out value, false);
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeU32(this READABLEBLOCK source, out UInt32 value) => ReadEndian(source, out value, false);

        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeS64(this READABLEBLOCK source, out Int64 value) => ReadEndian(source, out value, false);
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeU64(this READABLEBLOCK source, out UInt64 value) => ReadEndian(source, out value, false);

        #if NET5_0_OR_GREATER
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeF16(this READABLEBLOCK source, out Half value) => ReadEndian(source, out value, false);
        #endif
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeF32(this READABLEBLOCK source, out Single value) => ReadEndian(source, out value, false);
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadLeF64(this READABLEBLOCK source, out Double value) => ReadEndian(source, out value, false);


        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeS16(this READABLEBLOCK source, out Int16 value) => ReadEndian(source, out value, true);
        /// <summary>Reads little endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeU16(this READABLEBLOCK source, out UInt16 value) => ReadEndian(source, out value, true);

        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeS32(this READABLEBLOCK source, out Int32 value) => ReadEndian(source, out value, true);
        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeU32(this READABLEBLOCK source, out UInt32 value) => ReadEndian(source, out value, true);

        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeS64(this READABLEBLOCK source, out Int64 value) => ReadEndian(source, out value, true);
        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeU64(this READABLEBLOCK source, out UInt64 value) => ReadEndian(source, out value, true);

        #if NET5_0_OR_GREATER
        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeF16(this READABLEBLOCK source, out Half value) => ReadEndian(source, out value, true);
        #endif
        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeF32(this READABLEBLOCK source, out Single value) => ReadEndian(source, out value, true);
        /// <summary>Reads BIG endian value</summary>
        /// <returns>Next read context</returns>
        public static READABLEBLOCK ReadBeF64(this READABLEBLOCK source, out Double value) => ReadEndian(source, out value, true);        

        #endregion